---
name: Deploy Azure TRE Resuable

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      prRef:
        description: The git ref to checkout
        type: string
        required: false
      prHeadSha:
        description: >-
          For PR builds where GITHUB_REF isn't set to the PR (e.g. comment trigger),
          pass the PR's head SHA commit here
        type: string
        required: false
      ciGitRef:
        description: The git ref to use in annotations to associate a deployment with the code that triggered it
        type: string
        required: true
      e2eTestsCustomSelector:
        description: The pytest marker selector for the e2e tests to be run
        type: string
        default: ""
        required: false
      environmentName:
        description: The name of the Github Action's environment this will deploy into
        type: string
        required: true
    secrets:
      AAD_TENANT_ID:
        description: ""
        required: true
      ACR_NAME:
        description: ""
        required: true
      ACTIONS_ACR_NAME:
        description: ""
        required: true
      ACTIONS_ACR_URI:
        description: ""
        required: true
      ACTIONS_ACR_PASSWORD:
        description: ""
        required: true
      ACTIONS_DEVCONTAINER_TAG:
        description: ""
        required: true
      API_CLIENT_ID:
        description: ""
        required: true
      API_CLIENT_SECRET:
        description: ""
        required: true
      APPLICATION_ADMIN_CLIENT_ID:
        description: ""
        required: true
      APPLICATION_ADMIN_CLIENT_SECRET:
        description: ""
        required: true
      ARM_CLIENT_ID:
        description: ""
        required: true
      ARM_CLIENT_SECRET:
        description: ""
        required: true
      ARM_SUBSCRIPTION_ID:
        description: ""
        required: true
      ARM_TENANT_ID:
        description: ""
        required: true
      CORE_ADDRESS_SPACE:
        description: ""
        required: true
      LOCATION:
        description: ""
        required: true
      MGMT_RESOURCE_GROUP:
        description: ""
        required: true
      MS_TEAMS_WEBHOOK_URI:
        description: ""
        required: true
      STATE_STORAGE_ACCOUNT_NAME:
        description: ""
        required: true
      SWAGGER_UI_CLIENT_ID:
        description: ""
        required: true
      TEST_APP_ID:
        description: ""
        required: true
      TEST_WORKSPACE_APP_ID:
        description: ""
        required: true
      TEST_WORKSPACE_APP_SECRET:
        description: ""
        required: true
      TEST_ACCOUNT_CLIENT_ID:
        description: ""
        required: true
      TEST_ACCOUNT_CLIENT_SECRET:
        description: ""
        required: true
      TF_STATE_CONTAINER:
        description: ""
        required: true
      TRE_ADDRESS_SPACE:
        description: ""
        required: true
      TRE_ID:
        description: ""
        required: true
      CI_CACHE_ACR_NAME:
        description: ""
        required: false
      TF_LOG:
        description: ""
        required: false

# This will prevent multiple runs of this entire workflow.
# We should NOT cancel in progress runs as that can destabilize the environment.
concurrency: "deploy-${{ inputs.ciGitRef }}"

jobs:
  deploy_management:
    name: Deploy Management
    runs-on: ubuntu-latest
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Show inputs
        run: |
          echo "Inputs"
          echo "======"
          echo "prRef       : ${{ inputs.prRef }}"
          echo "prRHeadSha  : ${{ inputs.prHeadSha }}"
          echo "ciGitRef    : ${{ inputs.ciGitRef }}"
          echo "environment : ${{ inputs.environmentName }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker BuildKit
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACTIONS_ACR_URI }}
          username: ${{ secrets.ACTIONS_ACR_NAME }}
          password: ${{ secrets.ACTIONS_ACR_PASSWORD }}

      - name: Build new devcontainer
        shell: bash
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -e
          USER_UID=$(id -u)
          USER_GID=$(id -g)
          docker build . \
            -t 'tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}' \
            -f '.devcontainer/Dockerfile' \
            --cache-from ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }} \
            --cache-from ${{ secrets.ACTIONS_ACR_URI }}tredev:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg USER_UID="${USER_UID}" \
            --build-arg USER_GID="${USER_GID}"
          docker image tag tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }} \
            ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}

      - name: Deploy management
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bootstrap mgmt-deploy"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: "${{ secrets.MGMT_RESOURCE_GROUP }}"
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"

      - name: Push cached devcontainer
        if: ${{ success() }}
        shell: bash
        run: |
          set -e
          docker image push \
            ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}

  build_core_images:
    # used to build images used by core infrastructure
    name: Build Core Docker Images
    runs-on: ubuntu-latest
    needs: [deploy_management]
    environment: ${{ inputs.environmentName }}
    strategy:
      fail-fast: true
      matrix:
        target: [build-and-push-api, build-and-push-resource-processor, build-and-push-airlock-processor]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Docker build
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make ${{ matrix.target }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          CI_CACHE_ACR_NAME: ${{ secrets.CI_CACHE_ACR_NAME}}

  start_tre:
    name: Start TRE
    runs-on: ubuntu-latest
    needs: [deploy_management]
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Start TRE
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make tre-start"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TEST_WORKSPACE_APP_SECRET: "${{ secrets.TEST_WORKSPACE_APP_SECRET }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_stateful_resources_locked:
            "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

  deploy_tre:
    name: Deploy TRE
    runs-on: ubuntu-latest
    needs: [build_core_images, start_tre]
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Deploy TRE Core
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "TF_VAR_ci_git_ref=${{ inputs.ciGitRef }} TF_LOG=${{ secrets.TF_LOG }} make deploy-core"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TEST_WORKSPACE_APP_SECRET: "${{ secrets.TEST_WORKSPACE_APP_SECRET }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_application_admin_client_id: "${{ secrets.APPLICATION_ADMIN_CLIENT_ID }}"
          TF_VAR_application_admin_client_secret: "${{ secrets.APPLICATION_ADMIN_CLIENT_SECRET }}"
          TF_VAR_stateful_resources_locked:
            "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

      - name: API Healthcheck
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make api-healthcheck"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TEST_WORKSPACE_APP_SECRET: "${{ secrets.TEST_WORKSPACE_APP_SECRET }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_stateful_resources_locked:
            "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

  publish_bundles:
    name: Publish Bundles
    runs-on: ubuntu-latest
    needs: [deploy_management]
    strategy:
      matrix:
        include:
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspaces/base"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/azureml"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/innereye"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/gitea"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/mlflow"}
          - {BUNDLE_TYPE: "user_resource",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole/user_resources/guacamole-azure-windowsvm"}
          - {BUNDLE_TYPE: "user_resource",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole/user_resources/guacamole-azure-linuxvm"}
          # Add your custom Bundles below this
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Publish bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          # Although porter publish will build automatically, our makefile build target includes logic that should run
          COMMAND: >-
            for i in {1..3}; do make bundle-build bundle-publish DIR=${{ matrix.BUNDLE_DIR }}
            && break || sleep 30; done
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}

  publish_shared_bundles:
    name: Publish Shared Bundles
    runs-on: ubuntu-latest
    needs: [deploy_management]
    strategy:
      matrix:
        include:
          - {BUNDLE_TYPE: "shared_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/shared_services/firewall/"}
          - {BUNDLE_TYPE: "shared_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/shared_services/gitea/"}
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Publish bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          # Although porter publish will build automatically, our makefile build target includes logic that should run
          COMMAND: >-
            for i in {1..3}; do make bundle-build bundle-publish DIR=${{ matrix.BUNDLE_DIR }}
            && break || sleep 30; done
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}

  register_shared_bundles:
    name: Register Shared Bundles
    runs-on: ubuntu-latest
    needs: [publish_shared_bundles, deploy_tre]
    strategy:
      matrix:
        include:
          - {BUNDLE_TYPE: "shared_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/shared_services/firewall"}
          - {BUNDLE_TYPE: "shared_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/shared_services/gitea"}
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}
      - name: Register bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bundle-register DIR=${{ matrix.BUNDLE_DIR }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          BUNDLE_TYPE: ${{ matrix.BUNDLE_TYPE }}

  register_bundles:
    name: Register Bundles
    runs-on: ubuntu-latest
    needs: [publish_bundles, deploy_tre]
    strategy:
      matrix:
        include:
          # bundles type can be inferred from the bundle dir (but this is more explicit)
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspaces/base"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/azureml"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/innereye"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/gitea"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/mlflow"}
        # Add your bundles here
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}
      - name: Register bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bundle-register DIR=${{ matrix.BUNDLE_DIR }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          BUNDLE_TYPE: ${{ matrix.BUNDLE_TYPE }}

  register_user_resource_bundles:
    name: Register User Resource Bundles
    runs-on: ubuntu-latest
    # user resource bundles need to wait for their parent resource to be registered.
    needs: [register_bundles, publish_bundles, deploy_tre]
    strategy:
      matrix:
        include:
          - {BUNDLE_TYPE: "user_resource",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole/user_resources/guacamole-azure-windowsvm",
             WORKSPACE_SERVICE_NAME: "tre-service-guacamole"}
          - {BUNDLE_TYPE: "user_resource",
             BUNDLE_DIR: "\\${AZURETRE_HOME}/templates/workspace_services/guacamole/user_resources/guacamole-azure-linuxvm",
             WORKSPACE_SERVICE_NAME: "tre-service-guacamole"}
          # Add your custom Bundles below this
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}
      - name: Register bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bundle-register DIR=${{ matrix.BUNDLE_DIR }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          BUNDLE_TYPE: ${{ matrix.BUNDLE_TYPE }}
          WORKSPACE_SERVICE_NAME: ${{ matrix.WORKSPACE_SERVICE_NAME }}

  deploy_shared_services:
    name: Deploy shared services
    runs-on: ubuntu-latest
    needs: [register_shared_bundles, deploy_tre]
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Deploy firewall
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make deploy-shared-service DIR=\\${AZURETRE_HOME}/templates/shared_services/firewall/ BUNDLE_TYPE=shared_service"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"

      - name: State Store Migrations
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make db-migrate"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TEST_WORKSPACE_APP_SECRET: "${{ secrets.TEST_WORKSPACE_APP_SECRET }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_stateful_resources_locked:
            "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

  deploy_ui:
    name: Deploy UI
    runs-on: ubuntu-latest
    needs: [deploy_tre]
    environment: ${{ inputs.environmentName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}
      - name: Deploy UI
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make build-and-deploy-ui"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          API_CLIENT_ID: "${{ secrets.API_CLIENT_ID }}"
          AAD_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TEST_WORKSPACE_APP_SECRET: "${{ secrets.TEST_WORKSPACE_APP_SECRET }}"
          TEST_ACCOUNT_CLIENT_ID: "${{ secrets.TEST_ACCOUNT_CLIENT_ID }}"
          TEST_ACCOUNT_CLIENT_SECRET: "${{ secrets.TEST_ACCOUNT_CLIENT_SECRET }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_application_admin_client_id: "${{ secrets.APPLICATION_ADMIN_CLIENT_ID }}"
          TF_VAR_application_admin_client_secret: "${{ secrets.APPLICATION_ADMIN_CLIENT_SECRET }}"
          TF_VAR_stateful_resources_locked:
            "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
